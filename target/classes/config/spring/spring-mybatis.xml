<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- <context:property-placeholder location="classpath:jdbc.properties" /> -->

	<!-- 分页处理 aop 
	<bean id="pageAspect" class="com.shell.ida.persistence.aop.PageAspect" />

-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close"  init-method="init">
		<!--<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="properties" ref="dataSourceEncryptProperties" />
		 <property name="user" value="${jdbc.username}" /> <property name="password"
			value="${jdbc.password}" /> &ndash;&gt;
		<property name="idleConnectionTestPeriod" value="${jdbc.idle.connection.test.period}" />
		<property name="maxIdleTime" value="${jdbc.idle.max.age}" />
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />-->
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.idle.connection.test.period}"/>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${jdbc.idle.max.age}"/>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${jdbc.minPoolSize}"/>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${jdbc.maxPoolSize}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${jdbc.initialPoolSize}"/>
		<!-- 
		<property name="connectProperties" ref="dataSourceEncryptProperties"/>
		 -->
		<!--开启sql监听-->
		<property name="filters" value="stat" />
	</bean>

<!-- 
	<bean id="dataSourceEncryptProperties"
		class="com.shell.framework.kernel.util.PropertiesEncryptUtil">
		<property name="properties">
			<props>
				<prop key="user">${jdbc.username}</prop>
				<prop key="password">${jdbc.password}</prop>
			</props>
		</property>
	</bean>
 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath*:config/mapper/mysql/*.xml</value>
			</array>
		</property>
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
	</bean>
<!-- 
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.**.dao" />
	  <property name="markerExtService" value="com.shell.seed.base.dao.BaseDao"/> 
	</bean>
 -->
 
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.huawei.it.hwdata.dao" />
		<!-- <property name="markerExtService" value="com.shell.seed.base.dao.BaseDao"/> -->
	</bean>
    
    
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>


<!-- 

	<aop:aspectj-autoproxy />
	<aop:config>
		<aop:pointcut id="appService"
			expression="(execution(* com.shell..*.service.impl.*Service*.*(..))) or 
			(execution(* com.shell.external..*.*ExtServiceImpl*.*(..))) or
			(execution(* com.winchain..*.service.impl.*Service*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="appService" />
	</aop:config>
 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="select*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="txTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"></property>
	</bean>


</beans>